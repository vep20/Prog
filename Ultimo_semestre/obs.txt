Aula1 lab - Boas praticas de programação
   Realizado exercicios de aquecimento

Aula2 lab - Estudo sobre tipos de arquivos para uso de programas em c: .c, .h e makefile
   Lançado o tp1 no moodle

Ex compactar arquivo: tar zcvf tp1.tgz tp1 
Compilar gcc -Wall -Werror -Wextra -pedantic fonte.c -o executavel

Aula3 lab - Ponteiros e como utiliza-los
   Revisar site do Mazieiro

Aula4 lab - Apos tp1 e tp2 - 
   Estudo de vetores:
      Andar em um vetor: *(vet+0) *(vet+1) - para monstrar, inserir etc, no vetor, ou seja, desreferenciar o mesmo   

Aula5 lab - Alocação de memória em C 
   Alocação estativa = variaveis globais estaticas, geralmente usua a área Data;
      ''    automatica = pega o tamanho na pilha;
   malloc, instruçoes: deve sempre se usar a biblioteca stdlib.h. Exemplo de uso
   int main(){
      int *p; //Declara um ponteiro de inteiro
    
      p = malloc (sizeof(int)); //Aloca o espaço de um inteiro, sizeof especifica o espaço disponivel para o tipo de variavel solicitada
      *p = 10;

      printf("Endereço dee p = %p e valor de p = %d", p, *p);
      free (p); // libera a p endereço alocado pos final do programa, ou seja deixa a região de memoria disponivel novamente;
      return 0;
   }
   obs: nunca usar novamente a variavel se der um free na mesma 
   tambem para garantir que o ponteiros não irá ser usado pos o free, se usa: p = NULL;

   realloc - Define um novo tamanho necerrario para variaveis, ex: possui um vetor tamanho n e no meio do programa precisa que ele seja 
   n + 1;

   Em vetores podemos declar em alocação dinamica.
   Ex:

   int main(){
      int *vet;
      int tam, x;

      scanf("%d", &tam);
      vet = malloc(sizeof(int) * tam * 1024);

      if (!vet){//Testando se há espaço na memoria para o malloc pre definido
         
         fprint(stderr, "deu erro\n");\\ força o pŕograma a retornar mensagem de erro antes de morrer
         exit (1);
      }

      for (x = 0; x < tam*1024; x++)
         *(vet+x) = x * 2;

      free(vet);
      return 0;      
   }

   *vet[tam]; //vetor de ponteiros; 

   obs: malloc pega memoria na heap;

   Para o tp3 sera necessario mallocar struct, sendo assim, em exemplo:
   {struct ponto *p[10];

   p[i] = cria_r;}

   para o trabalho: void aloca_vetor (int *v, int tam){
      v = malloc (sizeof(int) * tam);  
   }


    /*for(int i = 1; i <= n; i++){
        printf("%d: ",i);
        r1 = sorteia_r(max);
        r2 = sorteia_r(max);
    
        imprime_r(r1);
        imprime_r(r2);

        if(!r1.valido || !r2.valido){
            printf("NUMERO INVALIDO\n");
            return 1;
           /* Retorno de erro para o programa*/ 
        /*}
        
        soma_r(r1,r2,&soma);
        subtrai_r(r1,r2,&sub);
        multiplica_r(r1,r2,&mult);
        
        if(!divide_r(r1,r2,&div)){
            printf("DIVISAO INVALIDA\n");
            return 1;
           /* Retorno de erro para o programa*/ 
        /*}

        imprime_r(soma);
        imprime_r(sub);
        imprime_r(mult);
        imprime_r(div);
        printf("\n");
    }*/

-------------------------------------------------------------------------------------------------------
Aulas Maziero
   

-03/09 - Aula 01:
Apresentação da disciplina
Introdução à Linguagem C

-05/09 - Aula 02:
Controle de fluxo
Tipos de dados
Operadores
Entrada e saída padrão
Edição e compilação C em UNIX
Lista de exercícios 1 (para 10/9)

-12/09 - Aula 4 
Vetores                                   
- função memcpy (vb,va,tam*sizeof(int)); - sizeof(int) = 4 bytes - esta na biblioteca string.h
                 destino, origem e quantos bytes devem ser copiados;                


17/09 - Aula 05:
Funções (passagem de parâmetros por valor)
Estruturas.
   OBS no preenchimento de structs: 
       
      struct paciente_t{
         char  nome[100] ;
         short idade ;
               short quarto ;
      } ;
   
      struct paciente_t p = {"nulo", 0, 0} 

   return(x > 0 ?  1 :  )


24/10 - 

   Implementação de uma fila, importante ler wiki;
   Para implemntar a aritmedica modular, usa-se % 
   ex: livre ++ % (capacidade do vetor), ou seja, fila->livre = (f->livre +1) % f->cap;
      f->dados = (f->dados +  1) % f->cap;
      em print (f->vet)

31/10 - 

não realizar free dos items no proximo trabalha somente dos nodos
mesmo um ponteiro sendo void, é possivel comparar ele com outro. Não pode realizar ++ e desreferenciar
o mesmo. 


05/11 -

   struct cjto_t{
      bool flag[]; - 1 byte 
      int cap;
      int num;
   }

flag[i] = true sse i e C;
pesquisar sobre bitmap - vetor de flag informando se i pertence; 
nas maquinas que usamos, utilizamos firesystem, toda area há um bitmap informando qual espaço esta disponivel

07/11 - 
   informações sobre the boys:
   Dica de alg de implementação de conjuntos de herois(base), ordenar por distancia das missões;
   Sempre testar se heroi esta morto;
   
      mundo.h 
      base
      heroi 
      vetor de ponteitos, alocamento dinamico missão - tentativa 
   
   como criar um herois e destruir

   prio da f.prio = tempo crescente 

   verificar arquivo de saida a partir da linha 330
   
12/11

consertar malloc para:
                  /*type casting*/
c89 utilizava-se (struct nodo_t *) malloc(sizeof(strcut nodo_)), porque malloc retornava um *char
c99 somente utiliza aux = malloc(........)

14/11

   comandos basicos unix:
   diretorio bin possui todos os comandos basicos do linux;
   home do dinf:  home> bcc imb e prof;
   pwd, mostra o caminho que você esta;
   nome do progama -k nome da pesquisa - mostra onde é mencionado o nome da pesquisa
   tree, mostra a "arvore de um diretorio"
   man, para verificar o manual de cada comando 
   which - acha o programa 
   du - quanto do disco usa


   Organize seu desenvolvimento da seguinte forma:

Desenvolva os TADs:
Implemente e teste um módulo de TAD por vez
Em cada módulo, implemente e teste uma função por vez
Implemente as funções nesta ordem: _imprime, _cria, _insere, _retira, …
Em cada função, escreva e teste um bloco por vez
Comece sempre pela parte mais simples
Use os programas de teste e o Valgrind para se assegurar que o módulo está correto, antes de iniciar o próximo módulo.

Desenvolva o programa theboys.c:
   Defina as estruturas de dados necessárias
   Implemente a criação e destruição dessas estruturas de dados
   Implemente a criação dos eventos iniciais
   Defina uma função para cada evento, contendo inicialmente apenas um printf do mesmo
   Implemente o laço principal de simulação, que chama as funções dos eventos
   Implemente e teste uma função de evento por vez (deixe a missão por último)   
   Analise a saída para ver se a sequência de eventos parece correta
   Use o Valgrind para verificar eventuais problemas de memória

